{
	"info": {
		"_postman_id": "41b627db-fac9-4f8c-8352-5b9852692653",
		"name": "Stryukova_HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "The first",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest(\"http://162.55.220.72:5005/first\", function (err, res) {\r",
							"  console.log(err ? err : res.text());  // The console prints the request text\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить respons body  в Json\r",
							"var jsonData = pm.response.json();\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body({\"age\":\"28\",\"family\":{\"children\":[[\"Alex\",24],[\"Kate\",12]],\"u_salary_1_5_year\":12000},\"name\":\"Henry\",\"salary\":3000});\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Person is 28 y.o.\", () => {\r",
							"  pm.expect(jsonData.age).to.eql(\"28\");\r",
							"});\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Person is Henry\", () => {\r",
							"  pm.expect(jsonData.name).to.eql(\"Henry\");\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary\", () => {\r",
							"  pm.expect(jsonData.salary).to.eql(3000);\r",
							"});\r",
							"//Спарсить request.\r",
							"let post_form_data = request.data;\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"NameReq=NameResp\", () => {\r",
							"  pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"AgeReq=AgeResp\", () => {\r",
							"  pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"SalaryReq=SalaryResp\", () => {\r",
							"  pm.expect(jsonData.salary).to.eql+(request.data.salary);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary*4=Salary1.5\", () => {\r",
							"  pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request.data.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest(\"http://162.55.220.72:5005/object_info_3?name=Gosha&age=20&salary=3000\", function (err, response)\r",
							" {\r",
							"    console.log(response.json());\r",
							"}\r",
							");\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var responseJson=pm.response.json();\r",
							"//\r",
							"console.log(responseJson);\r",
							"//Спарсить request.\r",
							"let get_params = pm.request.url.query.toObject()\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"NameReq=NameResp\", () => {\r",
							"  pm.expect(responseJson.name).to.eql(get_params.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"AgeReq=AgeResp\", () => {\r",
							"  pm.expect(responseJson.age).to.eql(get_params.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"SalaryReq=SalaryResp\", () => {\r",
							"  pm.expect(responseJson.salary).to.eql+(get_params.salary);\r",
							"});\r",
							" //Вывести в консоль параметр family из response.\r",
							"console.log(responseJson.family);\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name is Luky\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Age is 4\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lana",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "43",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос\r",
							"pm.sendRequest(\"http://162.55.220.72:5005/object_info_4?name=Henry&age=28&salary=5000\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"//Статус 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Распарсить respons body in json\r",
							"var responseJson = pm.response.json();\r",
							"//Распарсить request\r",
							"let get_params = pm.request.url.query.toObject();\r",
							"//Вывести в консоль реквест параметры\r",
							"console.log(get_params);\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"RespAge=RequstAge\", function () {\r",
							"    \r",
							"    pm.expect(responseJson.age).to.eql+(get_params.age);\r",
							"});\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"RespName=RequstName\", function () {\r",
							"    \r",
							"    pm.expect(responseJson.name).to.eql(get_params.name);\r",
							"});\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log(get_params.salary);\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log(responseJson.salary);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(responseJson.salary[0]);\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseJson.salary[1]);\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseJson.salary[2]);\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"RespSalary0=RequstSalary\", function () {\r",
							"    pm.expect(responseJson.salary[0]).to.eql+(get_params.salary);\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var jsonData = pm.response.json();\r",
							"var salary = (responseJson.salary[1]);\r",
							"var salaryNumber = Number(salary);\r",
							"\r",
							"pm.test(\"RespSalary1=RequstSalary*2\", function () {\r",
							"    pm.expect(salaryNumber).to.eql(get_params.salary*2);\r",
							"});\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"var salary2 = (responseJson.salary[2]);\r",
							"var salaryNumber = Number(salary2);\r",
							"\r",
							"pm.test(\"RespSalary2=RequstSalary*3\", function () {\r",
							"    pm.expect(salaryNumber).to.eql(get_params.salary*3);\r",
							"});\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\",\"Henry\");\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"28\");\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\",\"3000\");\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for(i in jsonData.salary){console.log('Номер ' +i+\" :\"+jsonData.salary[i]);}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{url}}user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respJson = pm.response.json();\r",
							"var get_params = request.data;\r",
							"console.log(respJson);\r",
							"console.log(get_params);\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"The json  has parameter 'start_qa_salary'\", function(){\r",
							"    pm.expect(respJson).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"The json  has parameter 'qa_salary_after_6_months'\", function(){\r",
							"    pm.expect(respJson).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"The json  has parameter 'qa_salary_after_12_months'\", function(){\r",
							"    pm.expect(respJson).to.have.property(\"qa_salary_after_12_months\");\r",
							"    });\r",
							"    //Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"    pm.test(\"The json  has parameter 'qa_salary_after_1.5_year'\", function(){\r",
							"    pm.expect(respJson).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"    });\r",
							"    //Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"    pm.test(\"The json  has parameter 'qa_salary_after_3.5_years'\", function(){\r",
							"    pm.expect(respJson).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"    });\r",
							"    //Проверить, что json response имеет параметр person\r",
							"    pm.test(\"The json  has parameter 'person'\", function(){\r",
							"    pm.expect(respJson).to.have.property(\"person\");\r",
							"    });\r",
							"    //Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Start_qa_salary=salary\", function () {\r",
							"    \r",
							"    pm.expect(respJson.start_qa_salary).to.eql+(get_params.salary);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_6_months=salary*2\", function () {\r",
							"    \r",
							"    pm.expect(respJson.qa_salary_after_6_months).to.eql(get_params.salary*2);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_12_months=salary*2,7\", function () {\r",
							"    \r",
							"    pm.expect(respJson.qa_salary_after_12_months).to.eql(get_params.salary*2.7);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_1.5_year\", function () {\r",
							"    \r",
							"    pm.expect(respJson.qa_salary_after_15_year).to.eql+(get_params.salary*3.3);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    \r",
							"    pm.expect(respJson.qa_salary_after_3_5_years).to.eql+(get_params.salary*3.8);\r",
							"    });\r",
							"    //Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"   pm.test(\"u_name[1]=salary\", function () {\r",
							"    \r",
							"    pm.expect(respJson.person.u_name[1]).to.eql+(get_params.salary);\r",
							"    }); \r",
							"    //Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"    pm.test(\"u_age=age\", function () {\r",
							"    \r",
							"    pm.expect(respJson.person.u_age).to.eql+(get_params.age);\r",
							"    }); \r",
							"    //Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"    pm.test(\"u_salary_5_years=salary*4.2\", function () {\r",
							"    \r",
							"    pm.expect(respJson.person.u_salary_5_years).to.eql+(get_params.salary*4.2);\r",
							"    }); \r",
							"    //***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"    for(i in respJson.person){console.log('Параметр ' +i+\" :\"+respJson.person[i]);}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}